// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_CombatPlayer
#include <CombatPlayer.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_611c92f5952aa967_12_new,"CombatPlayer","new",0x2dd80a47,"CombatPlayer.new","CombatPlayer.hx",12,0xddc41b09)
static const int _hx_array_data_a5cddad5_1[] = {
	(int)0,
};
static const int _hx_array_data_a5cddad5_2[] = {
	(int)3,
};
static const int _hx_array_data_a5cddad5_3[] = {
	(int)6,
};
static const int _hx_array_data_a5cddad5_4[] = {
	(int)0,(int)1,(int)0,(int)2,
};
static const int _hx_array_data_a5cddad5_5[] = {
	(int)3,(int)4,(int)3,(int)5,
};
static const int _hx_array_data_a5cddad5_6[] = {
	(int)6,(int)7,(int)6,(int)8,
};
static const int _hx_array_data_a5cddad5_7[] = {
	(int)0,(int)1,(int)0,(int)2,
};
static const int _hx_array_data_a5cddad5_8[] = {
	(int)9,(int)10,(int)11,(int)9,
};
static const int _hx_array_data_a5cddad5_9[] = {
	(int)14,(int)14,(int)14,(int)14,
};
HX_LOCAL_STACK_FRAME(_hx_pos_611c92f5952aa967_44_update,"CombatPlayer","update",0xe9db3682,"CombatPlayer.update","CombatPlayer.hx",44,0xddc41b09)
HX_LOCAL_STACK_FRAME(_hx_pos_611c92f5952aa967_8_boot,"CombatPlayer","boot",0xe749f46b,"CombatPlayer.boot","CombatPlayer.hx",8,0xddc41b09)

void CombatPlayer_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_611c92f5952aa967_12_new)
HXLINE(  13)		super::__construct(x,y,null());
HXLINE(  15)		this->loadGraphic(HX_("assets/images/goku_sprite.png",02,c9,79,7f),true,32,46,null(),null());
HXLINE(  18)		this->_facingFlip->set(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  19)		this->_facingFlip->set(16, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  20)		this->_facingFlip->set(256, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  25)		this->setSize(( (Float)(16) ),( (Float)(23) ));
HXLINE(  26)		{
HXLINE(  26)			 ::flixel::math::FlxBasePoint this1 = this->offset;
HXDLIN(  26)			this1->set_x(( (Float)(8) ));
HXDLIN(  26)			this1->set_y(( (Float)(23) ));
            		}
HXLINE(  29)		this->animation->add(HX_("d_idle",0f,d8,74,f4),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_1,1),null(),null(),null(),null());
HXLINE(  30)		this->animation->add(HX_("lr_idle",ad,fe,81,18),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_2,1),null(),null(),null(),null());
HXLINE(  31)		this->animation->add(HX_("u_idle",5e,fa,85,c0),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_3,1),null(),null(),null(),null());
HXLINE(  32)		this->animation->add(HX_("d_walk",04,8e,b3,fd),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_4,4),6,null(),null(),null());
HXLINE(  33)		this->animation->add(HX_("lr_walk",a2,b4,c0,21),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_5,4),6,null(),null(),null());
HXLINE(  34)		this->animation->add(HX_("u_walk",53,b0,c4,c9),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_6,4),6,null(),null(),null());
HXLINE(  35)		this->animation->add(HX_("combat_idle",3f,76,33,08),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_7,4),6,true,null(),null());
HXLINE(  36)		this->animation->add(HX_("dodge",d7,ec,bc,dd),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_8,4),6,false,null(),null());
HXLINE(  37)		this->animation->add(HX_("hurt",0f,5c,17,45),::Array_obj< int >::fromData( _hx_array_data_a5cddad5_9,4),6,false,null(),null());
            	}

Dynamic CombatPlayer_obj::__CreateEmpty() { return new CombatPlayer_obj; }

void *CombatPlayer_obj::_hx_vtable = 0;

Dynamic CombatPlayer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CombatPlayer_obj > _hx_result = new CombatPlayer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CombatPlayer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x258e63c1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x258e63c1;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void CombatPlayer_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_611c92f5952aa967_44_update)
HXDLIN(  44)		this->super::update(elapsed);
            	}


Float CombatPlayer_obj::SPEED;


::hx::ObjectPtr< CombatPlayer_obj > CombatPlayer_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< CombatPlayer_obj > __this = new CombatPlayer_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< CombatPlayer_obj > CombatPlayer_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	CombatPlayer_obj *__this = (CombatPlayer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CombatPlayer_obj), true, "CombatPlayer"));
	*(void **)__this = CombatPlayer_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

CombatPlayer_obj::CombatPlayer_obj()
{
}

void CombatPlayer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CombatPlayer);
	HX_MARK_MEMBER_NAME(stepSound,"stepSound");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CombatPlayer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(stepSound,"stepSound");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CombatPlayer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stepSound") ) { return ::hx::Val( stepSound ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CombatPlayer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"stepSound") ) { stepSound=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CombatPlayer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("stepSound",e3,21,38,f1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CombatPlayer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(CombatPlayer_obj,stepSound),HX_("stepSound",e3,21,38,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CombatPlayer_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &CombatPlayer_obj::SPEED,HX_("SPEED",67,cf,57,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CombatPlayer_obj_sMemberFields[] = {
	HX_("stepSound",e3,21,38,f1),
	HX_("update",09,86,05,87),
	::String(null()) };

static void CombatPlayer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CombatPlayer_obj::SPEED,"SPEED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CombatPlayer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CombatPlayer_obj::SPEED,"SPEED");
};

#endif

::hx::Class CombatPlayer_obj::__mClass;

static ::String CombatPlayer_obj_sStaticFields[] = {
	HX_("SPEED",67,cf,57,ff),
	::String(null())
};

void CombatPlayer_obj::__register()
{
	CombatPlayer_obj _hx_dummy;
	CombatPlayer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CombatPlayer",d5,da,cd,a5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CombatPlayer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CombatPlayer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CombatPlayer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CombatPlayer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CombatPlayer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CombatPlayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CombatPlayer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CombatPlayer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_611c92f5952aa967_8_boot)
HXDLIN(   8)		SPEED = ((Float)100);
            	}
}

