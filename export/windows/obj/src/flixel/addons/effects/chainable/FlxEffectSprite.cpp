// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxEffectSprite
#include <flixel/addons/effects/chainable/FlxEffectSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_83057b428e6d8eeb_26_new,"flixel.addons.effects.chainable.FlxEffectSprite","new",0xb885f1f2,"flixel.addons.effects.chainable.FlxEffectSprite.new","flixel/addons/effects/chainable/FlxEffectSprite.hx",26,0xbae4f7a0)
HX_LOCAL_STACK_FRAME(_hx_pos_83057b428e6d8eeb_74_destroy,"flixel.addons.effects.chainable.FlxEffectSprite","destroy",0x275d7f8c,"flixel.addons.effects.chainable.FlxEffectSprite.destroy","flixel/addons/effects/chainable/FlxEffectSprite.hx",74,0xbae4f7a0)
HX_LOCAL_STACK_FRAME(_hx_pos_83057b428e6d8eeb_91_getScreenPosition,"flixel.addons.effects.chainable.FlxEffectSprite","getScreenPosition",0x7753907d,"flixel.addons.effects.chainable.FlxEffectSprite.getScreenPosition","flixel/addons/effects/chainable/FlxEffectSprite.hx",91,0xbae4f7a0)
HX_LOCAL_STACK_FRAME(_hx_pos_83057b428e6d8eeb_95_draw,"flixel.addons.effects.chainable.FlxEffectSprite","draw",0xb61b6a32,"flixel.addons.effects.chainable.FlxEffectSprite.draw","flixel/addons/effects/chainable/FlxEffectSprite.hx",95,0xbae4f7a0)
HX_LOCAL_STACK_FRAME(_hx_pos_83057b428e6d8eeb_142_update,"flixel.addons.effects.chainable.FlxEffectSprite","update",0xaa9f2bb7,"flixel.addons.effects.chainable.FlxEffectSprite.update","flixel/addons/effects/chainable/FlxEffectSprite.hx",142,0xbae4f7a0)
namespace flixel{
namespace addons{
namespace effects{
namespace chainable{

void FlxEffectSprite_obj::__construct( ::flixel::FlxSprite Target,::Array< ::Dynamic> Effects){
            	HX_STACKFRAME(&_hx_pos_83057b428e6d8eeb_26_new)
HXLINE(  41)		this->updateTargetAnimation = true;
HXLINE(  31)		this->effectsEnabled = true;
HXLINE(  61)		super::__construct(null(),null(),null());
HXLINE(  63)		this->target = Target;
HXLINE(  64)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(  64)		if (::hx::IsNotNull( Effects )) {
HXLINE(  64)			_hx_tmp = Effects;
            		}
            		else {
HXLINE(  64)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXDLIN(  64)		this->effects = _hx_tmp;
HXLINE(  66)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  66)		point->_inPool = false;
HXDLIN(  66)		this->_effectOffset = point;
            	}

Dynamic FlxEffectSprite_obj::__CreateEmpty() { return new FlxEffectSprite_obj; }

void *FlxEffectSprite_obj::_hx_vtable = 0;

Dynamic FlxEffectSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxEffectSprite_obj > _hx_result = new FlxEffectSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxEffectSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x156bf340) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x156bf340;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxEffectSprite_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_83057b428e6d8eeb_74_destroy)
HXLINE(  75)		this->effects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->effects);
HXLINE(  76)		this->_effectOffset = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_effectOffset)) );
HXLINE(  77)		this->target = null();
HXLINE(  79)		this->super::destroy();
            	}


 ::flixel::math::FlxBasePoint FlxEffectSprite_obj::getScreenPosition( ::flixel::math::FlxBasePoint point, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_83057b428e6d8eeb_91_getScreenPosition)
HXDLIN(  91)		 ::flixel::math::FlxBasePoint this1 = this->super::getScreenPosition(point,Camera);
HXDLIN(  91)		 ::flixel::math::FlxBasePoint point1 = this->_effectOffset;
HXDLIN(  91)		{
HXDLIN(  91)			Float y = point1->y;
HXDLIN(  91)			this1->set_x((this1->x + point1->x));
HXDLIN(  91)			this1->set_y((this1->y + y));
            		}
HXDLIN(  91)		{
HXDLIN(  91)			 ::flixel::math::FlxBasePoint _this = point1;
HXDLIN(  91)			if (_this->_weak) {
HXDLIN(  91)				_this->put();
            			}
            		}
HXDLIN(  91)		return this1;
            	}


void FlxEffectSprite_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_83057b428e6d8eeb_95_draw)
HXLINE(  96)		if (this->target->dirty) {
HXLINE(  98)			this->target->drawFrame(null());
            		}
HXLINE( 101)		if (::hx::IsNull( this->target->framePixels )) {
HXLINE( 102)			this->super::draw();
HXDLIN( 102)			return;
            		}
HXLINE( 104)		bool _hx_tmp;
HXDLIN( 104)		bool _hx_tmp1;
HXDLIN( 104)		if (::hx::IsNotNull( this->get_pixels() )) {
HXLINE( 104)			_hx_tmp1 = (this->get_pixels()->width == this->target->framePixels->width);
            		}
            		else {
HXLINE( 104)			_hx_tmp1 = false;
            		}
HXDLIN( 104)		if (_hx_tmp1) {
HXLINE( 104)			_hx_tmp = (this->get_pixels()->height == this->target->framePixels->height);
            		}
            		else {
HXLINE( 104)			_hx_tmp = false;
            		}
HXDLIN( 104)		if (_hx_tmp) {
HXLINE( 106)			 ::openfl::display::BitmapData _hx_tmp2 = this->get_pixels();
HXDLIN( 106)			_hx_tmp2->fillRect(this->get_pixels()->rect,0);
HXLINE( 107)			this->get_pixels()->draw(this->target->framePixels,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE( 111)			::flixel::util::FlxDestroyUtil_obj::dispose(this->get_pixels());
HXLINE( 112)			this->set_pixels(this->target->framePixels->clone());
            		}
HXLINE( 115)		{
HXLINE( 115)			 ::flixel::math::FlxBasePoint this1 = this->_effectOffset;
HXDLIN( 115)			this1->set_x(( (Float)(0) ));
HXDLIN( 115)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 117)		if (this->effectsEnabled) {
HXLINE( 119)			this->get_pixels()->lock();
HXLINE( 120)			{
HXLINE( 120)				int _g = 0;
HXDLIN( 120)				::Array< ::Dynamic> _g1 = this->effects;
HXDLIN( 120)				while((_g < _g1->length)){
HXLINE( 120)					::Dynamic effect = _g1->__get(_g);
HXDLIN( 120)					_g = (_g + 1);
HXLINE( 122)					if (( (bool)(effect->__Field(HX_("active",c6,41,46,16),::hx::paccDynamic)) )) {
HXLINE( 124)						this->set_pixels(::flixel::addons::effects::chainable::IFlxEffect_obj::apply(effect,this->get_pixels()));
HXLINE( 125)						if (::hx::IsNotNull( effect->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic) )) {
HXLINE( 127)							 ::flixel::math::FlxBasePoint this2 = this->_effectOffset;
HXDLIN( 127)							 ::flixel::math::FlxBasePoint point = ( ( ::flixel::math::FlxBasePoint)(effect->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) );
HXDLIN( 127)							{
HXLINE( 127)								Float y = point->y;
HXDLIN( 127)								this2->set_x((this2->x + point->x));
HXDLIN( 127)								this2->set_y((this2->y + y));
            							}
HXDLIN( 127)							{
HXLINE( 127)								 ::flixel::math::FlxBasePoint _this = point;
HXDLIN( 127)								if (_this->_weak) {
HXLINE( 127)									_this->put();
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 131)			this->get_pixels()->unlock(null());
HXLINE( 132)			this->_flashRect = this->get_pixels()->rect;
            		}
HXLINE( 135)		this->super::draw();
            	}


void FlxEffectSprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_83057b428e6d8eeb_142_update)
HXLINE( 143)		bool _hx_tmp;
HXDLIN( 143)		if (this->updateTargetAnimation) {
HXLINE( 143)			_hx_tmp = (this->target->animation->_sprite->get_numFrames() > 1);
            		}
            		else {
HXLINE( 143)			_hx_tmp = false;
            		}
HXDLIN( 143)		if (_hx_tmp) {
HXLINE( 145)			this->target->updateAnimation(elapsed);
            		}
HXLINE( 148)		if (this->effectsEnabled) {
HXLINE( 150)			int _g = 0;
HXDLIN( 150)			::Array< ::Dynamic> _g1 = this->effects;
HXDLIN( 150)			while((_g < _g1->length)){
HXLINE( 150)				::Dynamic effect = _g1->__get(_g);
HXDLIN( 150)				_g = (_g + 1);
HXLINE( 152)				if (( (bool)(effect->__Field(HX_("active",c6,41,46,16),::hx::paccDynamic)) )) {
HXLINE( 154)					::flixel::addons::effects::chainable::IFlxEffect_obj::update(effect,elapsed);
            				}
            			}
            		}
HXLINE( 159)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< FlxEffectSprite_obj > FlxEffectSprite_obj::__new( ::flixel::FlxSprite Target,::Array< ::Dynamic> Effects) {
	::hx::ObjectPtr< FlxEffectSprite_obj > __this = new FlxEffectSprite_obj();
	__this->__construct(Target,Effects);
	return __this;
}

::hx::ObjectPtr< FlxEffectSprite_obj > FlxEffectSprite_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxSprite Target,::Array< ::Dynamic> Effects) {
	FlxEffectSprite_obj *__this = (FlxEffectSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxEffectSprite_obj), true, "flixel.addons.effects.chainable.FlxEffectSprite"));
	*(void **)__this = FlxEffectSprite_obj::_hx_vtable;
	__this->__construct(Target,Effects);
	return __this;
}

FlxEffectSprite_obj::FlxEffectSprite_obj()
{
}

void FlxEffectSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxEffectSprite);
	HX_MARK_MEMBER_NAME(effectsEnabled,"effectsEnabled");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(updateTargetAnimation,"updateTargetAnimation");
	HX_MARK_MEMBER_NAME(effects,"effects");
	HX_MARK_MEMBER_NAME(_effectOffset,"_effectOffset");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxEffectSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(effectsEnabled,"effectsEnabled");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(updateTargetAnimation,"updateTargetAnimation");
	HX_VISIT_MEMBER_NAME(effects,"effects");
	HX_VISIT_MEMBER_NAME(_effectOffset,"_effectOffset");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxEffectSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"effects") ) { return ::hx::Val( effects ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_effectOffset") ) { return ::hx::Val( _effectOffset ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"effectsEnabled") ) { return ::hx::Val( effectsEnabled ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getScreenPosition") ) { return ::hx::Val( getScreenPosition_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"updateTargetAnimation") ) { return ::hx::Val( updateTargetAnimation ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxEffectSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"effects") ) { effects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_effectOffset") ) { _effectOffset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"effectsEnabled") ) { effectsEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"updateTargetAnimation") ) { updateTargetAnimation=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxEffectSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("effectsEnabled",df,43,75,92));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("updateTargetAnimation",6a,1d,53,6d));
	outFields->push(HX_("effects",c2,e4,4b,2e));
	outFields->push(HX_("_effectOffset",e3,bb,8d,8d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxEffectSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxEffectSprite_obj,effectsEnabled),HX_("effectsEnabled",df,43,75,92)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxEffectSprite_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsBool,(int)offsetof(FlxEffectSprite_obj,updateTargetAnimation),HX_("updateTargetAnimation",6a,1d,53,6d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxEffectSprite_obj,effects),HX_("effects",c2,e4,4b,2e)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxEffectSprite_obj,_effectOffset),HX_("_effectOffset",e3,bb,8d,8d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxEffectSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxEffectSprite_obj_sMemberFields[] = {
	HX_("effectsEnabled",df,43,75,92),
	HX_("target",51,f3,ec,86),
	HX_("updateTargetAnimation",6a,1d,53,6d),
	HX_("effects",c2,e4,4b,2e),
	HX_("_effectOffset",e3,bb,8d,8d),
	HX_("destroy",fa,2c,86,24),
	HX_("getScreenPosition",6b,93,88,24),
	HX_("draw",04,2c,70,42),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class FlxEffectSprite_obj::__mClass;

void FlxEffectSprite_obj::__register()
{
	FlxEffectSprite_obj _hx_dummy;
	FlxEffectSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.effects.chainable.FlxEffectSprite",00,d1,0d,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxEffectSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxEffectSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxEffectSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxEffectSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace effects
} // end namespace chainable
