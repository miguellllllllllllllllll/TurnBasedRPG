// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemyType
#include <EnemyType.h>
#endif
#ifndef INCLUDED_FSM
#include <FSM.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVelocity
#include <flixel/math/FlxVelocity.h>
#endif
#ifndef INCLUDED_flixel_math__FlxPoint_FlxPoint_Impl_
#include <flixel/math/_FlxPoint/FlxPoint_Impl_.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c595a05c1c7a687d_31_new,"Enemy","new",0x35d4571a,"Enemy.new","Enemy.hx",31,0xbda88996)
static const int _hx_array_data_03a88228_1[] = {
	(int)0,
};
static const int _hx_array_data_03a88228_2[] = {
	(int)3,
};
static const int _hx_array_data_03a88228_3[] = {
	(int)6,
};
static const int _hx_array_data_03a88228_4[] = {
	(int)0,(int)1,(int)0,(int)2,
};
static const int _hx_array_data_03a88228_5[] = {
	(int)3,(int)4,(int)3,(int)5,
};
static const int _hx_array_data_03a88228_6[] = {
	(int)6,(int)7,(int)6,(int)8,
};
static const int _hx_array_data_03a88228_7[] = {
	(int)15,(int)16,(int)17,(int)16,
};
static const int _hx_array_data_03a88228_8[] = {
	(int)12,(int)12,(int)12,(int)12,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_59_idle,"Enemy","idle",0xe0a9031a,"Enemy.idle","Enemy.hx",59,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_86_chase,"Enemy","chase",0x416ec6e8,"Enemy.chase","Enemy.hx",86,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_98_changeType,"Enemy","changeType",0x98354cd0,"Enemy.changeType","Enemy.hx",98,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_108_update,"Enemy","update",0xcf0e6f8f,"Enemy.update","Enemy.hx",108,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_19_boot,"Enemy","boot",0xdc10e038,"Enemy.boot","Enemy.hx",19,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_20_boot,"Enemy","boot",0xdc10e038,"Enemy.boot","Enemy.hx",20,0xbda88996)

void Enemy_obj::__construct(Float x,Float y, ::EnemyType type){
            	HX_GC_STACKFRAME(&_hx_pos_c595a05c1c7a687d_31_new)
HXLINE(  32)		super::__construct(x,y,null());
HXLINE(  33)		this->type = type;
HXLINE(  34)		::String graphic;
HXDLIN(  34)		if (::hx::IsPointerEq( type,::EnemyType_obj::BOSS_dyn() )) {
HXLINE(  34)			graphic = HX_("assets/images/frieza.png",f5,50,d6,5a);
            		}
            		else {
HXLINE(  34)			graphic = HX_("assets/images/cooler.png",1c,e3,b8,7f);
            		}
HXLINE(  35)		this->loadGraphic(graphic,true,35,44,null(),null());
HXLINE(  36)		this->_facingFlip->set(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  37)		this->_facingFlip->set(16, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  38)		this->animation->add(HX_("d_idle",0f,d8,74,f4),::Array_obj< int >::fromData( _hx_array_data_03a88228_1,1),null(),null(),null(),null());
HXLINE(  39)		this->animation->add(HX_("lr_idle",ad,fe,81,18),::Array_obj< int >::fromData( _hx_array_data_03a88228_2,1),null(),null(),null(),null());
HXLINE(  40)		this->animation->add(HX_("u_idle",5e,fa,85,c0),::Array_obj< int >::fromData( _hx_array_data_03a88228_3,1),null(),null(),null(),null());
HXLINE(  41)		this->animation->add(HX_("d_walk",04,8e,b3,fd),::Array_obj< int >::fromData( _hx_array_data_03a88228_4,4),6,null(),null(),null());
HXLINE(  42)		this->animation->add(HX_("lr_walk",a2,b4,c0,21),::Array_obj< int >::fromData( _hx_array_data_03a88228_5,4),6,null(),null(),null());
HXLINE(  43)		this->animation->add(HX_("u_walk",53,b0,c4,c9),::Array_obj< int >::fromData( _hx_array_data_03a88228_6,4),6,null(),null(),null());
HXLINE(  44)		this->animation->add(HX_("combat_idle",3f,76,33,08),::Array_obj< int >::fromData( _hx_array_data_03a88228_7,4),6,true,null(),null());
HXLINE(  45)		this->animation->add(HX_("hurt",0f,5c,17,45),::Array_obj< int >::fromData( _hx_array_data_03a88228_8,4),6,false,null(),null());
HXLINE(  46)		{
HXLINE(  46)			 ::flixel::math::FlxBasePoint this1 = this->drag;
HXDLIN(  46)			this1->set_x(this->drag->set_y(( (Float)(10) )));
            		}
HXLINE(  50)		this->setSize(( (Float)(17) ),( (Float)(22) ));
HXLINE(  51)		this->offset->set_x(( (Float)(12) ));
HXLINE(  52)		this->offset->set_y(( (Float)(22) ));
HXLINE(  53)		this->brain =  ::FSM_obj::__alloc( HX_CTX ,this->idle_dyn());
HXLINE(  54)		this->idleTimer = ( (Float)(0) );
HXLINE(  55)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  55)		point->_inPool = false;
HXDLIN(  55)		this->playerPosition = point;
            	}

Dynamic Enemy_obj::__CreateEmpty() { return new Enemy_obj; }

void *Enemy_obj::_hx_vtable = 0;

Dynamic Enemy_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Enemy_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4fa17fa0) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x4fa17fa0;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Enemy_obj::idle(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_59_idle)
HXDLIN(  59)		if (this->seesPlayer) {
HXLINE(  61)			this->brain->activeState = this->chase_dyn();
            		}
            		else {
HXLINE(  63)			if ((this->idleTimer <= 0)) {
HXLINE(  66)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 95)) {
HXLINE(  68)					this->moveDirection = ( (Float)((::flixel::FlxG_obj::random->_hx_int(0,8,null()) * 45)) );
HXLINE(  70)					::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(this->velocity,((Float)40),(this->moveDirection * (::Math_obj::PI / ( (Float)(180) ))));
            				}
            				else {
HXLINE(  74)					this->moveDirection = ( (Float)(-1) );
HXLINE(  75)					{
HXLINE(  75)						 ::flixel::math::FlxBasePoint this1 = this->velocity;
HXDLIN(  75)						this1->set_x(this->velocity->set_y(( (Float)(0) )));
            					}
            				}
HXLINE(  77)				this->idleTimer = ( (Float)(::flixel::FlxG_obj::random->_hx_int(1,4,null())) );
            			}
            			else {
HXLINE(  80)				 ::Enemy _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  80)				_hx_tmp->idleTimer = (_hx_tmp->idleTimer - elapsed);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Enemy_obj,idle,(void))

void Enemy_obj::chase(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_86_chase)
HXDLIN(  86)		if (!(this->seesPlayer)) {
HXLINE(  88)			this->brain->activeState = this->idle_dyn();
            		}
            		else {
HXLINE(  92)			::flixel::math::FlxVelocity_obj::moveTowardsPoint(::hx::ObjectPtr<OBJ_>(this),this->playerPosition,((Float)70),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Enemy_obj,chase,(void))

void Enemy_obj::changeType( ::EnemyType type){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_98_changeType)
HXDLIN(  98)		if (::hx::IsPointerNotEq( this->type,type )) {
HXLINE( 100)			this->type = type;
HXLINE( 101)			::String graphic;
HXDLIN( 101)			if (::hx::IsPointerEq( type,::EnemyType_obj::BOSS_dyn() )) {
HXLINE( 101)				graphic = HX_("assets/images/frieza.png",f5,50,d6,5a);
            			}
            			else {
HXLINE( 101)				graphic = HX_("assets/images/cooler.png",1c,e3,b8,7f);
            			}
HXLINE( 102)			this->loadGraphic(graphic,true,35,44,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Enemy_obj,changeType,(void))

void Enemy_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_108_update)
HXLINE( 110)		if (::flixel::effects::FlxFlicker_obj::isFlickering(::hx::ObjectPtr<OBJ_>(this))) {
HXLINE( 111)			return;
            		}
HXLINE( 113)		::String action = HX_("idle",14,a7,b3,45);
HXLINE( 114)		bool _hx_tmp;
HXDLIN( 114)		if ((this->velocity->x == 0)) {
HXLINE( 114)			_hx_tmp = (this->velocity->y != 0);
            		}
            		else {
HXLINE( 114)			_hx_tmp = true;
            		}
HXDLIN( 114)		if (_hx_tmp) {
HXLINE( 116)			action = HX_("walk",09,5d,f2,4e);
HXLINE( 117)			if ((::Math_obj::abs(this->velocity->x) > ::Math_obj::abs(this->velocity->y))) {
HXLINE( 119)				if ((this->velocity->x < 0)) {
HXLINE( 120)					this->set_facing(1);
            				}
            				else {
HXLINE( 122)					this->set_facing(16);
            				}
            			}
            			else {
HXLINE( 126)				if ((this->velocity->y < 0)) {
HXLINE( 127)					this->set_facing(256);
            				}
            				else {
HXLINE( 129)					this->set_facing(4096);
            				}
            			}
            		}
HXLINE( 133)		switch((int)(this->facing)){
            			case (int)1: case (int)16: {
HXLINE( 136)				this->animation->play((HX_("lr_",19,57,52,00) + action),null(),null(),null());
            			}
            			break;
            			case (int)256: {
HXLINE( 139)				this->animation->play((HX_("u_",4a,66,00,00) + action),null(),null(),null());
            			}
            			break;
            			case (int)4096: {
HXLINE( 142)				this->animation->play((HX_("d_",7b,57,00,00) + action),null(),null(),null());
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 146)		this->brain->update(elapsed);
HXLINE( 147)		this->super::update(elapsed);
            	}


Float Enemy_obj::WALK_SPEED;

Float Enemy_obj::CHASE_SPEED;


::hx::ObjectPtr< Enemy_obj > Enemy_obj::__new(Float x,Float y, ::EnemyType type) {
	::hx::ObjectPtr< Enemy_obj > __this = new Enemy_obj();
	__this->__construct(x,y,type);
	return __this;
}

::hx::ObjectPtr< Enemy_obj > Enemy_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y, ::EnemyType type) {
	Enemy_obj *__this = (Enemy_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Enemy_obj), true, "Enemy"));
	*(void **)__this = Enemy_obj::_hx_vtable;
	__this->__construct(x,y,type);
	return __this;
}

Enemy_obj::Enemy_obj()
{
}

void Enemy_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Enemy);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(brain,"brain");
	HX_MARK_MEMBER_NAME(idleTimer,"idleTimer");
	HX_MARK_MEMBER_NAME(moveDirection,"moveDirection");
	HX_MARK_MEMBER_NAME(seesPlayer,"seesPlayer");
	HX_MARK_MEMBER_NAME(playerPosition,"playerPosition");
	HX_MARK_MEMBER_NAME(stepSound,"stepSound");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Enemy_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(brain,"brain");
	HX_VISIT_MEMBER_NAME(idleTimer,"idleTimer");
	HX_VISIT_MEMBER_NAME(moveDirection,"moveDirection");
	HX_VISIT_MEMBER_NAME(seesPlayer,"seesPlayer");
	HX_VISIT_MEMBER_NAME(playerPosition,"playerPosition");
	HX_VISIT_MEMBER_NAME(stepSound,"stepSound");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Enemy_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"idle") ) { return ::hx::Val( idle_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"brain") ) { return ::hx::Val( brain ); }
		if (HX_FIELD_EQ(inName,"chase") ) { return ::hx::Val( chase_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"idleTimer") ) { return ::hx::Val( idleTimer ); }
		if (HX_FIELD_EQ(inName,"stepSound") ) { return ::hx::Val( stepSound ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"seesPlayer") ) { return ::hx::Val( seesPlayer ); }
		if (HX_FIELD_EQ(inName,"changeType") ) { return ::hx::Val( changeType_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"moveDirection") ) { return ::hx::Val( moveDirection ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerPosition") ) { return ::hx::Val( playerPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Enemy_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::EnemyType >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"brain") ) { brain=inValue.Cast<  ::FSM >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"idleTimer") ) { idleTimer=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepSound") ) { stepSound=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"seesPlayer") ) { seesPlayer=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"moveDirection") ) { moveDirection=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerPosition") ) { playerPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Enemy_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("brain",b6,22,e9,b8));
	outFields->push(HX_("idleTimer",11,60,35,6d));
	outFields->push(HX_("moveDirection",ee,f4,ef,2a));
	outFields->push(HX_("seesPlayer",01,05,0b,46));
	outFields->push(HX_("playerPosition",2a,11,41,dd));
	outFields->push(HX_("stepSound",e3,21,38,f1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Enemy_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::EnemyType */ ,(int)offsetof(Enemy_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsObject /*  ::FSM */ ,(int)offsetof(Enemy_obj,brain),HX_("brain",b6,22,e9,b8)},
	{::hx::fsFloat,(int)offsetof(Enemy_obj,idleTimer),HX_("idleTimer",11,60,35,6d)},
	{::hx::fsFloat,(int)offsetof(Enemy_obj,moveDirection),HX_("moveDirection",ee,f4,ef,2a)},
	{::hx::fsBool,(int)offsetof(Enemy_obj,seesPlayer),HX_("seesPlayer",01,05,0b,46)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(Enemy_obj,playerPosition),HX_("playerPosition",2a,11,41,dd)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(Enemy_obj,stepSound),HX_("stepSound",e3,21,38,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Enemy_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Enemy_obj::WALK_SPEED,HX_("WALK_SPEED",71,28,9d,0d)},
	{::hx::fsFloat,(void *) &Enemy_obj::CHASE_SPEED,HX_("CHASE_SPEED",b6,8a,56,1a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Enemy_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("brain",b6,22,e9,b8),
	HX_("idleTimer",11,60,35,6d),
	HX_("moveDirection",ee,f4,ef,2a),
	HX_("seesPlayer",01,05,0b,46),
	HX_("playerPosition",2a,11,41,dd),
	HX_("stepSound",e3,21,38,f1),
	HX_("idle",14,a7,b3,45),
	HX_("chase",ae,9d,b3,45),
	HX_("changeType",4a,28,52,27),
	HX_("update",09,86,05,87),
	::String(null()) };

static void Enemy_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Enemy_obj::WALK_SPEED,"WALK_SPEED");
	HX_MARK_MEMBER_NAME(Enemy_obj::CHASE_SPEED,"CHASE_SPEED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Enemy_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Enemy_obj::WALK_SPEED,"WALK_SPEED");
	HX_VISIT_MEMBER_NAME(Enemy_obj::CHASE_SPEED,"CHASE_SPEED");
};

#endif

::hx::Class Enemy_obj::__mClass;

static ::String Enemy_obj_sStaticFields[] = {
	HX_("WALK_SPEED",71,28,9d,0d),
	HX_("CHASE_SPEED",b6,8a,56,1a),
	::String(null())
};

void Enemy_obj::__register()
{
	Enemy_obj _hx_dummy;
	Enemy_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Enemy",28,82,a8,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Enemy_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Enemy_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Enemy_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Enemy_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Enemy_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enemy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enemy_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Enemy_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_19_boot)
HXDLIN(  19)		WALK_SPEED = ((Float)40);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_20_boot)
HXDLIN(  20)		CHASE_SPEED = ((Float)70);
            	}
}

