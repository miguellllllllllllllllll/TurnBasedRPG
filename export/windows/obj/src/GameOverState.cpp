// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_26_new,"GameOverState","new",0x0e4d841d,"GameOverState.new","GameOverState.hx",26,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_76_checkHighscore,"GameOverState","checkHighscore",0x6e35422b,"GameOverState.checkHighscore","GameOverState.hx",76,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_97_switchToMainMenu,"GameOverState","switchToMainMenu",0xd69f104a,"GameOverState.switchToMainMenu","GameOverState.hx",97,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_95_switchToMainMenu,"GameOverState","switchToMainMenu",0xd69f104a,"GameOverState.switchToMainMenu","GameOverState.hx",95,0xd0ff2df3)

void GameOverState_obj::__construct(bool win,int score){
            	HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_26_new)
HXLINE(  27)		super::__construct();
HXLINE(  30)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  35)		::String _hx_tmp;
HXDLIN(  35)		if (win) {
HXLINE(  35)			_hx_tmp = HX_("You Win!",a6,8e,bd,58);
            		}
            		else {
HXLINE(  35)			_hx_tmp = HX_("Game Over!",9f,0d,f2,9a);
            		}
HXDLIN(  35)		this->titleText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,20,0,_hx_tmp,22,null());
HXLINE(  36)		this->titleText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  37)		{
HXLINE(  37)			 ::flixel::text::FlxText _this = this->titleText;
HXDLIN(  37)			int axes = 1;
HXDLIN(  37)			bool _hx_tmp1;
HXDLIN(  37)			if ((axes != 1)) {
HXLINE(  37)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(  37)				_hx_tmp1 = true;
            			}
HXDLIN(  37)			if (_hx_tmp1) {
HXLINE(  37)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(  37)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  37)			bool _hx_tmp3;
HXDLIN(  37)			if ((axes != 16)) {
HXLINE(  37)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(  37)				_hx_tmp3 = true;
            			}
HXDLIN(  37)			if (_hx_tmp3) {
HXLINE(  37)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  37)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  38)		this->add(this->titleText);
HXLINE(  40)		this->messageText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(18) )),0,HX_("Final Score:",52,28,01,31),8,null());
HXLINE(  41)		this->messageText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  42)		{
HXLINE(  42)			 ::flixel::text::FlxText _this1 = this->messageText;
HXDLIN(  42)			int axes1 = 1;
HXDLIN(  42)			bool _hx_tmp5;
HXDLIN(  42)			if ((axes1 != 1)) {
HXLINE(  42)				_hx_tmp5 = (axes1 == 17);
            			}
            			else {
HXLINE(  42)				_hx_tmp5 = true;
            			}
HXDLIN(  42)			if (_hx_tmp5) {
HXLINE(  42)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN(  42)				_this1->set_x(((( (Float)(_hx_tmp6) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  42)			bool _hx_tmp7;
HXDLIN(  42)			if ((axes1 != 16)) {
HXLINE(  42)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE(  42)				_hx_tmp7 = true;
            			}
HXDLIN(  42)			if (_hx_tmp7) {
HXLINE(  42)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN(  42)				_this1->set_y(((( (Float)(_hx_tmp8) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  43)		this->add(this->messageText);
HXLINE(  45)		this->scoreIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(8) )),0,HX_("assets/images/coin.png",f7,e9,c5,54));
HXLINE(  46)		{
HXLINE(  46)			 ::flixel::FlxSprite _this2 = this->scoreIcon;
HXDLIN(  46)			int axes2 = 16;
HXDLIN(  46)			bool _hx_tmp9;
HXDLIN(  46)			if ((axes2 != 1)) {
HXLINE(  46)				_hx_tmp9 = (axes2 == 17);
            			}
            			else {
HXLINE(  46)				_hx_tmp9 = true;
            			}
HXDLIN(  46)			if (_hx_tmp9) {
HXLINE(  46)				int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN(  46)				_this2->set_x(((( (Float)(_hx_tmp10) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  46)			bool _hx_tmp11;
HXDLIN(  46)			if ((axes2 != 16)) {
HXLINE(  46)				_hx_tmp11 = (axes2 == 17);
            			}
            			else {
HXLINE(  46)				_hx_tmp11 = true;
            			}
HXDLIN(  46)			if (_hx_tmp11) {
HXLINE(  46)				int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN(  46)				_this2->set_y(((( (Float)(_hx_tmp12) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  47)		this->add(this->scoreIcon);
HXLINE(  49)		Float _hx_tmp13 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN(  49)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp13,0,0,::Std_obj::string(score),8,null());
HXLINE(  50)		{
HXLINE(  50)			 ::flixel::text::FlxText _this3 = this->scoreText;
HXDLIN(  50)			int axes3 = 16;
HXDLIN(  50)			bool _hx_tmp14;
HXDLIN(  50)			if ((axes3 != 1)) {
HXLINE(  50)				_hx_tmp14 = (axes3 == 17);
            			}
            			else {
HXLINE(  50)				_hx_tmp14 = true;
            			}
HXDLIN(  50)			if (_hx_tmp14) {
HXLINE(  50)				int _hx_tmp15 = ::flixel::FlxG_obj::width;
HXDLIN(  50)				_this3->set_x(((( (Float)(_hx_tmp15) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  50)			bool _hx_tmp16;
HXDLIN(  50)			if ((axes3 != 16)) {
HXLINE(  50)				_hx_tmp16 = (axes3 == 17);
            			}
            			else {
HXLINE(  50)				_hx_tmp16 = true;
            			}
HXDLIN(  50)			if (_hx_tmp16) {
HXLINE(  50)				int _hx_tmp17 = ::flixel::FlxG_obj::height;
HXDLIN(  50)				_this3->set_y(((( (Float)(_hx_tmp17) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  51)		this->add(this->scoreText);
HXLINE(  54)		int highscore = this->checkHighscore(score);
HXLINE(  56)		this->highscoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) + 10),0,(HX_("Highscore: ",36,8f,53,b1) + highscore),8,null());
HXLINE(  57)		this->highscoreText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  58)		{
HXLINE(  58)			 ::flixel::text::FlxText _this4 = this->highscoreText;
HXDLIN(  58)			int axes4 = 16;
HXDLIN(  58)			bool _hx_tmp18;
HXDLIN(  58)			if ((axes4 != 1)) {
HXLINE(  58)				_hx_tmp18 = (axes4 == 17);
            			}
            			else {
HXLINE(  58)				_hx_tmp18 = true;
            			}
HXDLIN(  58)			if (_hx_tmp18) {
HXLINE(  58)				int _hx_tmp19 = ::flixel::FlxG_obj::width;
HXDLIN(  58)				_this4->set_x(((( (Float)(_hx_tmp19) ) - _this4->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  58)			bool _hx_tmp20;
HXDLIN(  58)			if ((axes4 != 16)) {
HXLINE(  58)				_hx_tmp20 = (axes4 == 17);
            			}
            			else {
HXLINE(  58)				_hx_tmp20 = true;
            			}
HXDLIN(  58)			if (_hx_tmp20) {
HXLINE(  58)				int _hx_tmp21 = ::flixel::FlxG_obj::height;
HXDLIN(  58)				_this4->set_y(((( (Float)(_hx_tmp21) ) - _this4->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  59)		this->add(this->highscoreText);
HXLINE(  61)		this->mainMenuButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 32),HX_("Main Menu",e6,3a,4e,c8),this->switchToMainMenu_dyn());
HXLINE(  62)		{
HXLINE(  62)			 ::flixel::ui::FlxButton _this5 = this->mainMenuButton;
HXDLIN(  62)			int axes5 = 1;
HXDLIN(  62)			bool _hx_tmp22;
HXDLIN(  62)			if ((axes5 != 1)) {
HXLINE(  62)				_hx_tmp22 = (axes5 == 17);
            			}
            			else {
HXLINE(  62)				_hx_tmp22 = true;
            			}
HXDLIN(  62)			if (_hx_tmp22) {
HXLINE(  62)				int _hx_tmp23 = ::flixel::FlxG_obj::width;
HXDLIN(  62)				_this5->set_x(((( (Float)(_hx_tmp23) ) - _this5->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  62)			bool _hx_tmp24;
HXDLIN(  62)			if ((axes5 != 16)) {
HXLINE(  62)				_hx_tmp24 = (axes5 == 17);
            			}
            			else {
HXLINE(  62)				_hx_tmp24 = true;
            			}
HXDLIN(  62)			if (_hx_tmp24) {
HXLINE(  62)				int _hx_tmp25 = ::flixel::FlxG_obj::height;
HXDLIN(  62)				_this5->set_y(((( (Float)(_hx_tmp25) ) - _this5->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  63)		this->mainMenuButton->onUp->sound = ::flixel::FlxG_obj::sound->load(HX_("assets/music/select.wav",70,c5,65,3e),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  64)		this->add(this->mainMenuButton);
HXLINE(  66)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true,null(),null());
            	}

Dynamic GameOverState_obj::__CreateEmpty() { return new GameOverState_obj; }

void *GameOverState_obj::_hx_vtable = 0;

Dynamic GameOverState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameOverState_obj > _hx_result = new GameOverState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GameOverState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x63e746eb) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x563293a6) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x563293a6;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x63e746eb;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

int GameOverState_obj::checkHighscore(int score){
            	HX_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_76_checkHighscore)
HXLINE(  77)		int highscore = score;
HXLINE(  78)		bool _hx_tmp;
HXDLIN(  78)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("highscore",b0,38,dd,f0),::hx::paccDynamic) )) {
HXLINE(  78)			_hx_tmp = ::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("highscore",b0,38,dd,f0),::hx::paccDynamic),highscore );
            		}
            		else {
HXLINE(  78)			_hx_tmp = false;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  80)			highscore = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("highscore",b0,38,dd,f0),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  85)			::flixel::FlxG_obj::save->data->__SetField(HX_("highscore",b0,38,dd,f0),highscore,::hx::paccDynamic);
            		}
HXLINE(  87)		return highscore;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameOverState_obj,checkHighscore,return )

void GameOverState_obj::switchToMainMenu(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::MenuState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_97_switchToMainMenu)
HXLINE(  97)				return  ::MenuState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_97_switchToMainMenu)
HXLINE(  97)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  97)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  97)			bool _hx_tmp;
HXDLIN(  97)			if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  97)				_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            			}
            			else {
HXLINE(  97)				_hx_tmp = true;
            			}
HXDLIN(  97)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_97_switchToMainMenu)
HXLINE(  97)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  97)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  97)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  97)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_95_switchToMainMenu)
HXDLIN(  95)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_2()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameOverState_obj,switchToMainMenu,(void))


::hx::ObjectPtr< GameOverState_obj > GameOverState_obj::__new(bool win,int score) {
	::hx::ObjectPtr< GameOverState_obj > __this = new GameOverState_obj();
	__this->__construct(win,score);
	return __this;
}

::hx::ObjectPtr< GameOverState_obj > GameOverState_obj::__alloc(::hx::Ctx *_hx_ctx,bool win,int score) {
	GameOverState_obj *__this = (GameOverState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameOverState_obj), true, "GameOverState"));
	*(void **)__this = GameOverState_obj::_hx_vtable;
	__this->__construct(win,score);
	return __this;
}

GameOverState_obj::GameOverState_obj()
{
}

void GameOverState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameOverState);
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(messageText,"messageText");
	HX_MARK_MEMBER_NAME(scoreIcon,"scoreIcon");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(highscoreText,"highscoreText");
	HX_MARK_MEMBER_NAME(mainMenuButton,"mainMenuButton");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameOverState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(messageText,"messageText");
	HX_VISIT_MEMBER_NAME(scoreIcon,"scoreIcon");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(highscoreText,"highscoreText");
	HX_VISIT_MEMBER_NAME(mainMenuButton,"mainMenuButton");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GameOverState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		if (HX_FIELD_EQ(inName,"scoreIcon") ) { return ::hx::Val( scoreIcon ); }
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"messageText") ) { return ::hx::Val( messageText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"highscoreText") ) { return ::hx::Val( highscoreText ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mainMenuButton") ) { return ::hx::Val( mainMenuButton ); }
		if (HX_FIELD_EQ(inName,"checkHighscore") ) { return ::hx::Val( checkHighscore_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"switchToMainMenu") ) { return ::hx::Val( switchToMainMenu_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GameOverState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreIcon") ) { scoreIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"messageText") ) { messageText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"highscoreText") ) { highscoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mainMenuButton") ) { mainMenuButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameOverState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("messageText",14,1e,e0,7f));
	outFields->push(HX_("scoreIcon",eb,97,76,d5));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("highscoreText",7d,49,32,22));
	outFields->push(HX_("mainMenuButton",8a,ba,e7,5b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GameOverState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GameOverState_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GameOverState_obj,messageText),HX_("messageText",14,1e,e0,7f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(GameOverState_obj,scoreIcon),HX_("scoreIcon",eb,97,76,d5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GameOverState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GameOverState_obj,highscoreText),HX_("highscoreText",7d,49,32,22)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(GameOverState_obj,mainMenuButton),HX_("mainMenuButton",8a,ba,e7,5b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GameOverState_obj_sStaticStorageInfo = 0;
#endif

static ::String GameOverState_obj_sMemberFields[] = {
	HX_("titleText",65,ba,a4,70),
	HX_("messageText",14,1e,e0,7f),
	HX_("scoreIcon",eb,97,76,d5),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("highscoreText",7d,49,32,22),
	HX_("mainMenuButton",8a,ba,e7,5b),
	HX_("checkHighscore",c8,26,94,57),
	HX_("switchToMainMenu",27,16,f6,00),
	::String(null()) };

::hx::Class GameOverState_obj::__mClass;

void GameOverState_obj::__register()
{
	GameOverState_obj _hx_dummy;
	GameOverState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("GameOverState",ab,31,a0,87);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameOverState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameOverState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameOverState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameOverState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

