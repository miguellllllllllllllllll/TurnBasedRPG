// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Coin
#include <Coin.h>
#endif
#ifndef INCLUDED_CombatHUD
#include <CombatHUD.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemyType
#include <EnemyType.h>
#endif
#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_HUD
#include <HUD.h>
#endif
#ifndef INCLUDED_Outcome
#include <Outcome.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmo3Loader
#include <flixel/addons/editors/ogmo/FlxOgmo3Loader.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTypedTilemap
#include <flixel/tile/FlxTypedTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_14_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",14,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_34_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",34,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_86_placeEntities,"PlayState","placeEntities",0xcb21ad57,"PlayState.placeEntities","PlayState.hx",86,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_107_playerTouchCoin,"PlayState","playerTouchCoin",0x7f00763e,"PlayState.playerTouchCoin","PlayState.hx",107,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_118_playerTouchEnemy,"PlayState","playerTouchEnemy",0xc787e8fb,"PlayState.playerTouchEnemy","PlayState.hx",118,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_125_startCombat,"PlayState","startCombat",0x485abba5,"PlayState.startCombat","PlayState.hx",125,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_137_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",137,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_197_doneFadeOut,"PlayState","doneFadeOut",0xf3a9b17f,"PlayState.doneFadeOut","PlayState.hx",197,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_202_checkEnemyVision,"PlayState","checkEnemyVision",0xe46dc499,"PlayState.checkEnemyVision","PlayState.hx",202,0xb30d7781)

void PlayState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_14_new)
HXLINE(  24)		this->inCombat = false;
HXLINE(  23)		this->health = 3;
HXLINE(  22)		this->money = 0;
HXLINE(  14)		super::__construct();
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_34_create)
HXLINE(  35)		 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,100,HX_("Hello, World!",15,c0,23,88),null(),null());
HXLINE(  36)		this->add(text);
HXLINE(  37)		 ::flixel::text::FlxText text1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,20,100,HX_("I miss my twink boyfriend...",48,0c,09,f3),null(),null());
HXLINE(  38)		this->add(text1);
HXLINE(  40)		this->map =  ::flixel::addons::editors::ogmo::FlxOgmo3Loader_obj::__alloc( HX_CTX ,HX_("assets/data/turnBasedRPG.ogmo",9c,c1,64,b5),HX_("assets/data/room-001.json",9e,bc,95,49));
HXLINE(  41)		this->walls = this->map->loadTilemap(HX_("assets/images/tiles.png",35,bc,d1,f5),HX_("walls",29,0c,1f,c5),null());
HXLINE(  42)		this->walls->follow(null(),null(),null());
HXLINE(  43)		this->walls->setTileProperties(1,0,null(),null(),null());
HXLINE(  44)		this->walls->setTileProperties(2,4369,null(),null(),null());
HXLINE(  45)		this->add(this->walls);
HXLINE(  48)		this->coins =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  49)		this->add(this->coins);
HXLINE(  52)		this->enemies =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  53)		this->add(this->enemies);
HXLINE(  56)		this->player =  ::Player_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  57)		this->map->loadEntities(this->placeEntities_dyn(),HX_("entities",41,96,95,92));
HXLINE(  58)		this->add(this->player);
HXLINE(  59)		::flixel::FlxG_obj::camera->follow(this->player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_dyn(),1);
HXLINE(  62)		this->hud =  ::HUD_obj::__alloc( HX_CTX );
HXLINE(  63)		this->add(this->hud);
HXLINE(  65)		this->combatHud =  ::CombatHUD_obj::__alloc( HX_CTX );
HXLINE(  66)		this->add(this->combatHud);
HXLINE(  68)		this->coinSound = ::flixel::FlxG_obj::sound->load(HX_("assets/music/coin.wav",05,95,81,59),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  75)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true,null(),null());
HXLINE(  78)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  81)		this->super::create();
            	}


void PlayState_obj::placeEntities( ::Dynamic entity){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_86_placeEntities)
HXDLIN(  86)		if (::hx::IsEq( entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("player",61,eb,b8,37) )) {
HXLINE(  88)			this->player->setPosition(entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic));
            		}
            		else {
HXLINE(  90)			if (::hx::IsEq( entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("coin",91,b5,c4,41) )) {
HXLINE(  92)				 ::flixel::group::FlxTypedGroup _hx_tmp = this->coins;
HXDLIN(  92)				_hx_tmp->add( ::Coin_obj::__alloc( HX_CTX ,( (Float)(entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ),( (Float)(entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ))).StaticCast<  ::Coin >();
            			}
            			else {
HXLINE(  95)				if (::hx::IsEq( entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("enemy",48,12,7b,70) )) {
HXLINE(  97)					 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->enemies;
HXDLIN(  97)					_hx_tmp1->add( ::Enemy_obj::__alloc( HX_CTX ,( (Float)((entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + 4)) ),( (Float)(entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ),::EnemyType_obj::REGULAR_dyn())).StaticCast<  ::Enemy >();
            				}
            				else {
HXLINE(  99)					if (::hx::IsEq( entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("boss",ad,87,1b,41) )) {
HXLINE( 101)						 ::flixel::group::FlxTypedGroup _hx_tmp2 = this->enemies;
HXDLIN( 101)						_hx_tmp2->add( ::Enemy_obj::__alloc( HX_CTX ,( (Float)((entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + 4)) ),( (Float)(entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ),::EnemyType_obj::BOSS_dyn())).StaticCast<  ::Enemy >();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,placeEntities,(void))

void PlayState_obj::playerTouchCoin( ::Player player, ::Coin coin){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_107_playerTouchCoin)
HXDLIN( 107)		bool _hx_tmp;
HXDLIN( 107)		bool _hx_tmp1;
HXDLIN( 107)		bool _hx_tmp2;
HXDLIN( 107)		if (player->alive) {
HXDLIN( 107)			_hx_tmp2 = player->exists;
            		}
            		else {
HXDLIN( 107)			_hx_tmp2 = false;
            		}
HXDLIN( 107)		if (_hx_tmp2) {
HXDLIN( 107)			_hx_tmp1 = coin->alive;
            		}
            		else {
HXDLIN( 107)			_hx_tmp1 = false;
            		}
HXDLIN( 107)		if (_hx_tmp1) {
HXDLIN( 107)			_hx_tmp = coin->exists;
            		}
            		else {
HXDLIN( 107)			_hx_tmp = false;
            		}
HXDLIN( 107)		if (_hx_tmp) {
HXLINE( 109)			this->coinSound->play(true,null(),null());
HXLINE( 110)			this->money++;
HXLINE( 111)			this->hud->updateHUD(this->health,this->money);
HXLINE( 112)			coin->kill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchCoin,(void))

void PlayState_obj::playerTouchEnemy( ::Player player, ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_118_playerTouchEnemy)
HXDLIN( 118)		bool _hx_tmp;
HXDLIN( 118)		bool _hx_tmp1;
HXDLIN( 118)		bool _hx_tmp2;
HXDLIN( 118)		bool _hx_tmp3;
HXDLIN( 118)		if (player->alive) {
HXDLIN( 118)			_hx_tmp3 = player->exists;
            		}
            		else {
HXDLIN( 118)			_hx_tmp3 = false;
            		}
HXDLIN( 118)		if (_hx_tmp3) {
HXDLIN( 118)			_hx_tmp2 = enemy->alive;
            		}
            		else {
HXDLIN( 118)			_hx_tmp2 = false;
            		}
HXDLIN( 118)		if (_hx_tmp2) {
HXDLIN( 118)			_hx_tmp1 = enemy->exists;
            		}
            		else {
HXDLIN( 118)			_hx_tmp1 = false;
            		}
HXDLIN( 118)		if (_hx_tmp1) {
HXDLIN( 118)			_hx_tmp = !(::flixel::effects::FlxFlicker_obj::isFlickering(enemy));
            		}
            		else {
HXDLIN( 118)			_hx_tmp = false;
            		}
HXDLIN( 118)		if (_hx_tmp) {
HXLINE( 120)			this->startCombat(enemy);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchEnemy,(void))

void PlayState_obj::startCombat( ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_125_startCombat)
HXLINE( 126)		this->inCombat = true;
HXLINE( 127)		this->player->set_active(false);
HXLINE( 128)		this->enemies->set_active(false);
HXLINE( 129)		this->combatHud->initCombat(this->health,enemy);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startCombat,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_137_update)
HXLINE( 139)		if (this->inCombat) {
HXLINE( 141)			if (!(this->combatHud->visible)) {
HXLINE( 143)				this->health = this->combatHud->playerHealth;
HXLINE( 144)				this->hud->updateHUD(this->health,this->money);
HXLINE( 145)				if (::hx::IsPointerEq( this->combatHud->outcome,::Outcome_obj::DEFEAT_dyn() )) {
HXLINE( 147)					this->ending = true;
HXLINE( 148)					::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false,this->doneFadeOut_dyn(),null());
            				}
            				else {
HXLINE( 152)					if (::hx::IsPointerEq( this->combatHud->outcome,::Outcome_obj::VICTORY_dyn() )) {
HXLINE( 154)						this->combatHud->enemy->kill();
HXLINE( 155)						if (::hx::IsPointerEq( this->combatHud->enemy->type,::EnemyType_obj::BOSS_dyn() )) {
HXLINE( 157)							this->won = true;
HXLINE( 158)							this->ending = true;
HXLINE( 159)							::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false,this->doneFadeOut_dyn(),null());
            						}
            					}
            					else {
HXLINE( 164)						 ::Dynamic CompletionCallback = null();
HXDLIN( 164)						 ::Dynamic ProgressCallback = null();
HXDLIN( 164)						::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(this->combatHud->enemy) ),( (Float)(1) ),((Float)0.04),true,true,CompletionCallback,ProgressCallback);
            					}
HXLINE( 166)					this->inCombat = false;
HXLINE( 167)					this->player->set_active(true);
HXLINE( 168)					this->enemies->set_active(true);
            				}
            			}
            		}
            		else {
HXLINE( 177)			{
HXLINE( 177)				 ::Dynamic notifyCallback = null();
HXDLIN( 177)				::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->walls) ),notifyCallback,::flixel::FlxObject_obj::separate_dyn());
            			}
HXLINE( 178)			::flixel::FlxG_obj::overlap(this->player,this->coins,this->playerTouchCoin_dyn(),null());
HXLINE( 179)			{
HXLINE( 179)				 ::Dynamic notifyCallback1 = null();
HXDLIN( 179)				::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->enemies) ),( ( ::flixel::FlxBasic)(this->walls) ),notifyCallback1,::flixel::FlxObject_obj::separate_dyn());
            			}
HXLINE( 180)			this->enemies->forEachAlive(this->checkEnemyVision_dyn(),null());
HXLINE( 181)			::flixel::FlxG_obj::overlap(this->player,this->enemies,this->playerTouchEnemy_dyn(),null());
            		}
HXLINE( 184)		this->super::update(elapsed);
HXLINE( 185)		if (this->ending) {
HXLINE( 187)			return;
            		}
HXLINE( 189)		{
HXLINE( 189)			 ::Dynamic notifyCallback2 = null();
HXDLIN( 189)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->walls) ),notifyCallback2,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 190)		::flixel::FlxG_obj::overlap(this->player,this->coins,this->playerTouchCoin_dyn(),null());
HXLINE( 191)		{
HXLINE( 191)			 ::Dynamic notifyCallback3 = null();
HXDLIN( 191)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->enemies) ),( ( ::flixel::FlxBasic)(this->walls) ),notifyCallback3,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 192)		this->enemies->forEachAlive(this->checkEnemyVision_dyn(),null());
            	}


void PlayState_obj::doneFadeOut(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_197_doneFadeOut)
HXDLIN( 197)		 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::GameOverState_obj::__alloc( HX_CTX ,this->won,this->money));
HXDLIN( 197)		 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 197)		bool _hx_tmp;
HXDLIN( 197)		if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXDLIN( 197)			_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            		}
            		else {
HXDLIN( 197)			_hx_tmp = true;
            		}
HXDLIN( 197)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_197_doneFadeOut)
HXDLIN( 197)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXDLIN( 197)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXDLIN( 197)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXDLIN( 197)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,doneFadeOut,(void))

void PlayState_obj::checkEnemyVision( ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_202_checkEnemyVision)
HXDLIN( 202)		 ::flixel::tile::FlxTilemap _hx_tmp = this->walls;
HXDLIN( 202)		 ::flixel::math::FlxBasePoint _hx_tmp1 = enemy->getMidpoint(null());
HXDLIN( 202)		if (_hx_tmp->ray(_hx_tmp1,this->player->getMidpoint(null()),null())) {
HXLINE( 204)			enemy->seesPlayer = true;
HXLINE( 205)			enemy->playerPosition = this->player->getMidpoint(null());
            		}
            		else {
HXLINE( 209)			enemy->seesPlayer = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkEnemyVision,(void))


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new() {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(walls,"walls");
	HX_MARK_MEMBER_NAME(coins,"coins");
	HX_MARK_MEMBER_NAME(enemies,"enemies");
	HX_MARK_MEMBER_NAME(hud,"hud");
	HX_MARK_MEMBER_NAME(money,"money");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(inCombat,"inCombat");
	HX_MARK_MEMBER_NAME(combatHud,"combatHud");
	HX_MARK_MEMBER_NAME(ending,"ending");
	HX_MARK_MEMBER_NAME(won,"won");
	HX_MARK_MEMBER_NAME(coinSound,"coinSound");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(walls,"walls");
	HX_VISIT_MEMBER_NAME(coins,"coins");
	HX_VISIT_MEMBER_NAME(enemies,"enemies");
	HX_VISIT_MEMBER_NAME(hud,"hud");
	HX_VISIT_MEMBER_NAME(money,"money");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(inCombat,"inCombat");
	HX_VISIT_MEMBER_NAME(combatHud,"combatHud");
	HX_VISIT_MEMBER_NAME(ending,"ending");
	HX_VISIT_MEMBER_NAME(won,"won");
	HX_VISIT_MEMBER_NAME(coinSound,"coinSound");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		if (HX_FIELD_EQ(inName,"hud") ) { return ::hx::Val( hud ); }
		if (HX_FIELD_EQ(inName,"won") ) { return ::hx::Val( won ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"walls") ) { return ::hx::Val( walls ); }
		if (HX_FIELD_EQ(inName,"coins") ) { return ::hx::Val( coins ); }
		if (HX_FIELD_EQ(inName,"money") ) { return ::hx::Val( money ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"ending") ) { return ::hx::Val( ending ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enemies") ) { return ::hx::Val( enemies ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"inCombat") ) { return ::hx::Val( inCombat ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"combatHud") ) { return ::hx::Val( combatHud ); }
		if (HX_FIELD_EQ(inName,"coinSound") ) { return ::hx::Val( coinSound ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"startCombat") ) { return ::hx::Val( startCombat_dyn() ); }
		if (HX_FIELD_EQ(inName,"doneFadeOut") ) { return ::hx::Val( doneFadeOut_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return ::hx::Val( placeEntities_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerTouchCoin") ) { return ::hx::Val( playerTouchCoin_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"playerTouchEnemy") ) { return ::hx::Val( playerTouchEnemy_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkEnemyVision") ) { return ::hx::Val( checkEnemyVision_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmo3Loader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hud") ) { hud=inValue.Cast<  ::HUD >(); return inValue; }
		if (HX_FIELD_EQ(inName,"won") ) { won=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"walls") ) { walls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"coins") ) { coins=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"money") ) { money=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ending") ) { ending=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enemies") ) { enemies=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"inCombat") ) { inCombat=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"combatHud") ) { combatHud=inValue.Cast<  ::CombatHUD >(); return inValue; }
		if (HX_FIELD_EQ(inName,"coinSound") ) { coinSound=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("walls",29,0c,1f,c5));
	outFields->push(HX_("coins",c2,29,5a,4a));
	outFields->push(HX_("enemies",a6,68,0e,d3));
	outFields->push(HX_("hud",b7,50,4f,00));
	outFields->push(HX_("money",40,ba,5f,0c));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("inCombat",f9,59,a4,4f));
	outFields->push(HX_("combatHud",e3,10,9a,6a));
	outFields->push(HX_("ending",e7,a3,88,fa));
	outFields->push(HX_("won",56,ad,5a,00));
	outFields->push(HX_("coinSound",7e,79,c4,7d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Player */ ,(int)offsetof(PlayState_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::flixel::addons::editors::ogmo::FlxOgmo3Loader */ ,(int)offsetof(PlayState_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,walls),HX_("walls",29,0c,1f,c5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,coins),HX_("coins",c2,29,5a,4a)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,enemies),HX_("enemies",a6,68,0e,d3)},
	{::hx::fsObject /*  ::HUD */ ,(int)offsetof(PlayState_obj,hud),HX_("hud",b7,50,4f,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,money),HX_("money",40,ba,5f,0c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCombat),HX_("inCombat",f9,59,a4,4f)},
	{::hx::fsObject /*  ::CombatHUD */ ,(int)offsetof(PlayState_obj,combatHud),HX_("combatHud",e3,10,9a,6a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,ending),HX_("ending",e7,a3,88,fa)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,won),HX_("won",56,ad,5a,00)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,coinSound),HX_("coinSound",7e,79,c4,7d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("player",61,eb,b8,37),
	HX_("map",9c,0a,53,00),
	HX_("walls",29,0c,1f,c5),
	HX_("coins",c2,29,5a,4a),
	HX_("enemies",a6,68,0e,d3),
	HX_("hud",b7,50,4f,00),
	HX_("money",40,ba,5f,0c),
	HX_("health",9c,28,06,fd),
	HX_("inCombat",f9,59,a4,4f),
	HX_("combatHud",e3,10,9a,6a),
	HX_("ending",e7,a3,88,fa),
	HX_("won",56,ad,5a,00),
	HX_("coinSound",7e,79,c4,7d),
	HX_("create",fc,66,0f,7c),
	HX_("placeEntities",28,e6,91,17),
	HX_("playerTouchCoin",4f,45,8d,f2),
	HX_("playerTouchEnemy",ca,48,30,6f),
	HX_("startCombat",36,6e,0c,3f),
	HX_("update",09,86,05,87),
	HX_("doneFadeOut",10,64,5b,ea),
	HX_("checkEnemyVision",68,24,16,8c),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

